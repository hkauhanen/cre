fit.cre(data=erkkiwide, format="wide", model="f", budget=20, method="re")
fit.cre(data=erkkiwide, format="wide", model="b", budget=20, method="re")
fit.cre(data=erkkiwide, format="wide", model="f", budget=20, method="av")
fit.cre(data=erkkiwide, format="wide", model="i", budget=20, method="av")
fit.cre(data=erkkiwide, format="wide", model="b", budget=20, method="av")
fit.cre(data=erkkiwide, format="wide", model="b", budget=20, method="st")
fit.cre(data=erkkiwide, format="wide", model="f", budget=20, method="st")
fit.cre(data=erkkiwide, format="wide", model="f", budget=20, method="re")
fit.cre(data=erkkiwide, format="wide", model="f", budget=20, method="re")
fit.cre(data=erkkiwide, format="wide", model="f", budget=20, method="av")
fit.cre(data=erkkiwide, format="wide", model="f", budget=20, method="re")
fit.cre(data=erkkiwide, format="wide", model="f", budget=20, method="av")
fit.cre(data=erkkiwide, format="wide", model="f", budget=50, method="re")
erkkiwide <- read.csv("~/Research/Papers/Reflexes and grammars/data/csv/zimmermann_noadjuncts.csv")
fit.cre(data=erkkiwide, format="wide", model="f", budget=50, method="re")
fit.cre(data=erkkiwide, format="wide", model="f", budget=50, method="av")
sqrt(50)
fit.cre(data=erkkiwide, format="wide", model="f", budget=50, method="av")
fit.cre(data=erkkiwide, format="wide", model="f", budget=50, method="re")
fit.cre(data=erkkiwide, format="wide", model="f", budget=100, method="re")
warnings()
fit.cre(data=erkkiwide, format="wide", model="b", budget=100, method="re")
fit.cre(data=erkkiwide, format="wide", model="b", budget=50, method="re")
fit.cre(data=erkkiwide, format="wide", model="b", budget=50, method="av")
fit.cre(data=erkkiwide, format="wide", model="b", budget=50, method="re")
fit.cre(data=erkkiwide, format="wide", model="f", budget=50, method="re")
fit.cre(data=erkkiwide, format="wide", model="f", budget=50, method="av")
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))) + b*(1/(1 + exp(-s*(k - date_dfo))))*(1 - (1/(1 + exp(-s*(k - date_dfo))))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s", "k"), start=list(s=0.0001, k=-2000, b=0.1), algorithm="port", lower=-1, upper=1, method="av")
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))) + b*(1/(1 + exp(-s*(k - date_dfo))))*(1 - (1/(1 + exp(-s*(k - date_dfo))))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s", "k"), start=list(s=0.0001, k=-2000, b=0.1), algorithm="port", lower=-1, upper=1, method="av", trace=TRUE)
q()
require(ficus)
require(devtools); require(roxygen2)
document(); build(); install()
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))) + b*(1/(1 + exp(-s*(k - date_dfo))))*(1 - (1/(1 + exp(-s*(k - date_dfo))))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s", "k"), start=list(s=0.0001, k=-2000, b=0.1), algorithm="port", lower=-1, upper=1, method="av", trace=TRUE)
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))) + b*(1/(1 + exp(-s*(k - date_dfo))))*(1 - (1/(1 + exp(-s*(k - date_dfo))))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s", "k"), start=list(s=0.0001, k=-2000, b=0.1), algorithm="port", lower=-1, upper=1, method="av")
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))) + b*(1/(1 + exp(-s*(k - date_dfo))))*(1 - (1/(1 + exp(-s*(k - date_dfo))))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s", "k"), start=list(s=0.0001, k=-2000, b=0.1), algorithm="port", lower=-1, upper=1, method="st")
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))) + b*(1/(1 + exp(-s*(k - date_dfo))))*(1 - (1/(1 + exp(-s*(k - date_dfo))))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s", "k"), start=list(s=0.0001, k=-2000, b=0.1), algorithm="port", lower=-1, upper=1, method="av")
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))) + b*(1/(1 + exp(-s*(k - date_dfo))))*(1 - (1/(1 + exp(-s*(k - date_dfo))))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s", "k"), start=list(s=0.0001, k=-2000, b=0.1), algorithm="port", lower=-1, upper=1, method="re")
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))) + b*(1/(1 + exp(-s*(k - date_dfo))))*(1 - (1/(1 + exp(-s*(k - date_dfo))))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s", "k"), start=list(s=0.0001, k=-2000, b=0.1), algorithm="port", lower=-1, upper=1, method="av")
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))) + b*(1/(1 + exp(-s*(k - date_dfo))))*(1 - (1/(1 + exp(-s*(k - date_dfo))))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s", "k"), start=list(s=0.0001, k=-1000, b=0.1), algorithm="port", lower=-1, upper=1, method="av")
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))) + b*(1/(1 + exp(-s*(k - date_dfo))))*(1 - (1/(1 + exp(-s*(k - date_dfo))))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s", "k"), start=list(s=0.0001, k=-9000, b=0.1), algorithm="port", lower=-1, upper=1, method="av")
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))) + b*(1/(1 + exp(-s*(k - date_dfo))))*(1 - (1/(1 + exp(-s*(k - date_dfo))))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s", "k"), start=list(s=0.00001, k=-9000, b=0.1), algorithm="port", lower=-1, upper=1, method="av")
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))) + b*(1/(1 + exp(-s*(k - date_dfo))))*(1 - (1/(1 + exp(-s*(k - date_dfo))))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s", "k"), start=list(s=0.000001, k=-9000, b=0.1), algorithm="port", lower=-1, upper=1, method="av")
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))) + b*(1/(1 + exp(-s*(k - date_dfo))))*(1 - (1/(1 + exp(-s*(k - date_dfo))))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s", "k"), start=list(s=0.0000001, k=-9000, b=0.1), algorithm="port", lower=-1, upper=1, method="av")
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))) + b*(1/(1 + exp(-s*(k - date_dfo))))*(1 - (1/(1 + exp(-s*(k - date_dfo))))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s", "k"), start=list(s=0.00005, k=-9000, b=0.1), algorithm="port", lower=-1, upper=1, method="av")
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))) + b*(1/(1 + exp(-s*(k - date_dfo))))*(1 - (1/(1 + exp(-s*(k - date_dfo))))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s", "k"), start=list(s=0.0005, k=-9000, b=0.1), algorithm="port", lower=-1, upper=1, method="av")
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))) + b*(1/(1 + exp(-s*(k - date_dfo))))*(1 - (1/(1 + exp(-s*(k - date_dfo))))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s", "k"), start=list(s=0.000005, k=-9000, b=0.1), algorithm="port", lower=-1, upper=1, method="av")
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))) + b*(1/(1 + exp(-s*(k - date_dfo))))*(1 - (1/(1 + exp(-s*(k - date_dfo))))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s", "k"), start=list(s=0.0000005, k=-9000, b=0.1), algorithm="port", lower=-1, upper=1, method="av")
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))) + b*(1/(1 + exp(-s*(k - date_dfo))))*(1 - (1/(1 + exp(-s*(k - date_dfo))))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s", "k"), start=list(s=0.0000005, k=-9000, b=0.1), algorithm="port", lower=-1, upper=1, method="ra")
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))) + b*(1/(1 + exp(-s*(k - date_dfo))))*(1 - (1/(1 + exp(-s*(k - date_dfo))))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s", "k"), start=list(s=0.0000005, k=-9000, b=0.1), algorithm="port", lower=-1, upper=1, method="ra", resolution=20)
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))) + b*(1/(1 + exp(-s*(k - date_dfo))))*(1 - (1/(1 + exp(-s*(k - date_dfo))))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s", "k"), start=list(s=0.0000005, k=-9000), algorithm="port", lower=-1, upper=1, method="ra", resolution=20, lower_bounds=list(s=0.000000001, k=-100000), upper_bounds=list(s=0.01, k=10000))
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))) + b*(1/(1 + exp(-s*(k - date_dfo))))*(1 - (1/(1 + exp(-s*(k - date_dfo))))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s", "k"), start=list(s=0.0000005, k=-9000, b=0.1), algorithm="port", lower=-1, upper=1, method="av")
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s", "k"), start=list(s=0.0001, k=-2000, b=0.1), algorithm="port", lower=-1, upper=1, method="av", trace=TRUE)
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s", "k"), start=list(s=0.0001, k=-2000), algorithm="port", method="av", trace=TRUE)
ficus::fit.shared(formula=frequency~(1/(1 + exp(-s*(k - date_dfo)))), data=prepare_data(erkkiwide, format="wide"), group="context", shared=c("s"), start=list(s=0.0001, k=-2000), algorithm="port", method="av", trace=TRUE)
fit.cre(data=erkkiwide, format="wide", model="b", budget=50, method="re")
fit.cre(data=erkkiwide, format="wide", model="b", budget=50, method="ra")
fit.cre(data=erkkiwide, format="wide", model="b", budget=50, method="ra", lower=-1, upper=1, algorithm="port")
-4.7e-01
-1.93e-01
-7.11e-01
0.5
0.5^5
0.5^10
document(); build(); install()
fit.cre(data=erkkiwide, format="wide", model="b", budget=50, method="ra")
q()
require(ficus)
require(devtools); require(roxygen2)
fit.cre(data=erkkiwide, format="wide", model="b", budget=50, method="ra")
document(); build(); install()
fit.cre(data=erkkiwide, format="wide", model="b", budget=50, method="ra")
document(); build(); install()
fit.cre(data=erkkiwide, format="wide", model="b", budget=50, method="ra")
document(); build(); install()
fit.cre(data=erkkiwide, format="wide", model="b", budget=50, method="ra")
fit.cre(data=erkkiwide, format="wide", model="b", budget=50, method="re")
fit.cre(data=erkkiwide, format="wide", model="b", budget=50, method="re")
fit.cre(data=erkkiwide, format="wide", model="b", budget=50, method="re")
fit.cre(data=erkkiwide, format="wide", model="b", budget=100, method="re")
fit.cre(data=erkkiwide, format="wide", model="b", budget=1000, method="re")
fit.cre(data=erkkiwide, format="wide", model="b", budget=1000, method="ra")
document(); build(); install()
fit.cre(data=erkkiwide, format="wide", model="b", budget=1000, method="ra")
32*32
fit.cre(data=erkkiwide, format="wide", model="b", budget=1000, method="av")
fit.cre(data=erkkiwide, format="wide", model="b", budget=1000, method="st")
0.1^5
0.5^5
0.4^5
0.3^5
document(); build(); install()
fit.cre(data=erkkiwide, format="wide", model="b", budget=1000, method="re")
system.time(fit.cre(data=erkkiwide, format="wide", model="b", budget=1000, method="re"))
system.time(fit.cre(data=erkkiwide, format="wide", model="b", budget=1000, method="ra"))
system.time(fit.cre(data=erkkiwide, format="wide", model="b", budget=1000, method="av"))
q()
q()
require(ficus)
require(devtools); require(roxygen2)
head(erkkiwide)
fit.cre(data=erkkiwide, format="wide", model="bias", budget=100, method="av")
document(); build(); install()
fit.cre(data=erkkiwide, format="wide", model="bias", budget=100, method="av")
fit.cre(data=erkkiwide, format="wide", model="bias", budget=100, method="av", warnOnly=TRUE)
document(); build(); install()
fit.cre(data=erkkiwide, format="wide", model="bias", budget=100, method="av", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="bias", budget=100, method="re", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="f", budget=100, method="re", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="f", budget=100, method="ra", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="f", budget=100, method="st", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="f", budget=100, method="av", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="f", budget=100, method="ra", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="f", budget=100, method="ra", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="f", budget=1000, method="ra", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="f", budget=1000, method="re", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="f", budget=1000, method="st", warnOnly=TRUE)
document(); build(); install()
fit.cre(data=erkkiwide, format="wide", model="f", budget=1000, method="st", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="f", budget=100, method="re", warnOnly=TRUE)
0.5^4
q()
require(ficus)
require(devtools); require(roxygen2)
document(); build(); install()
fit.cre(data=erkkiwide, format="wide", model="f", budget=100, method="re", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="f", budget=100, method="av", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="i", budget=100, method="av", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="b", budget=100, method="av", warnOnly=TRUE)
document(); build(); install()
fit.cre(data=erkkiwide, format="wide", model="i", budget=100, method="av", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="f", budget=100, method="av", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="b", budget=100, method="av", warnOnly=TRUE)
q()
require(ficus)
require(devtools); require(roxygen2)
fit.cre(data=erkkiwide, format="wide", model="b", budget=100, method="av", warnOnly=TRUE)
document(); build(); install()
fit.cre(data=erkkiwide, format="wide", model="b", budget=100, method="av", warnOnly=TRUE)
q()
require(ficus)
require(devtools); require(roxygen2)
fit.cre(data=erkkiwide, format="wide", model="b", budget=100, method="av", warnOnly=TRUE)
document(); build(); install()
fit.cre(data=erkkiwide, format="wide", model="b", budget=100, method="av", warnOnly=TRUE)
q()
require(ficus)
require(devtools); require(roxygen2)
document(); build(); install()
fit.cre(data=erkkiwide, format="wide", model="b", budget=100, method="av", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="b", budget=100, method="re", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="f", budget=100, method="av", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="f", budget=100, method="st", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="f", budget=100, method="re", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="f", budget=100, method="ra", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="i", budget=100, method="ra", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="i", budget=100, method="re", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="i", budget=100, method="av", warnOnly=TRUE)
document(); build(); install()
fit.cre(data=erkkiwide, format="wide", model="i", budget=100, method="av", warnOnly=TRUE)
document(); build(); install()
fit.cre(data=erkkiwide, format="wide", model="i", budget=100, method="av", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="i", budget=100, method="re", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="i", budget=100, method="ra", warnOnly=TRUE)
fit.cre(data=erkkiwide, format="wide", model="i", budget=100, method="st", warnOnly=TRUE)
q()
require(ficus)
require(devtools); require(roxygen2)
fit.cre(data=erkkiwide, format="wide", model="i", budget=100, method="st", warnOnly=TRUE)
document(); build(); install()
fit.cre(data=erkkiwide, format="wide", model="i", budget=100, method="st", warnOnly=TRUE)
q()
require(ficus)
require(devtools); require(roxygen2)
document(); build(); install()
fit.cre(data=erkkiwide, format="wide", model="i", budget=100, method="st", warnOnly=TRUE)
q()
require(ficus)
require(devtools); require(roxygen2)
document(); build(); install()
fit.cre(data=erkkiwide, format="wide", model="i", budget=100, method="st", warnOnly=TRUE)
q()
require(ficus)
require(devtools); require(roxygen2)
document(); build(); install()
fit.cre(data=erkkiwide, format="wide", model="i", budget=100, method="st", warnOnly=TRUE)
document(); build(); install()
fit.cre(data=erkkiwide, format="wide", model="i", budget=100, method="st", warnOnly=TRUE)
document(); build(); install()
fit.cre(data=erkkiwide, format="wide", model="i", budget=100, method="st", warnOnly=TRUE)
document(); build(); install()
fit.cre(data=erkkiwide, format="wide", model="i", budget=100, method="st", warnOnly=TRUE)
document(); build(); install()
document(); build(); install()
q()
require(devtools)
require(roxygen2)
build()
document()
build()
install()
q()
require(devtools)
require(roxygen2)
document(); build(); install()
q()
require(devtools)
require(roxygen2)
document(); build(); install()
q()
require(devtools); require(roxygen2)
document(); build(); install()
q()
require(devtools); require(roxygen2)
document(); build(); install()
q()
require(devtools); require(roxygen2)
document(); build()
check()
q()
require(devtools); require(roxygen2)
document(); build(); check(); install()
document(); build(); check(); install()
document(); build(); check(); install()
q()
?document
require(devtools); require(roxygen2)
?document
q()
require(devtools); require(roxygen2)
document(); build(); check(); install()
q()
require(devtools); require(roxygen2)
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
q()
require(devtools); require(roxygen2)
document(); build(); install()
document(); build(); install()
q()
require(devtools); require(roxygen2)
q()
document(); build(); install()
q()
require(devtools); require(roxygen2)
document()
build()
install()
install()
q()
require(devtools); require(roxygen2)
build()
install()
document(); build()
document(); build()
document(); build()
document(); build()
document(); build()
document(); build()
document(); build()
document(); build()
document(); build()
document(); build()
q()
require(devtools); require(roxygen2)
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
q()
require(devtools); require(roxygen2)
document(); build()
document(); build(); install()
q()
require(devtools); require(roxygen2)
document(); build(); install()
document(); build(); install()
q()
require(devtools); require(roxygen2)
document()
build()
check()
check()
document(); build(); check()
document(); build(); check()
document(); build(); check()
?glm
document(); build(); check()
?anova
?lm
?pchisq
document(); build(); check()
document(); build(); check()
document(); build(); check(); install()
document(); build(); check(); install()
document(); build(); check(); install()
q()
require(devtools); require(roxygen2)
document(); build(); check(); install()
document(); build(); check(); install()
q()
require(devtools); require(roxygen2)
document(); build(); check(); install()
q()
require(devtools); require(roxygen2)
document(); build(); check(); install()
document(); build(); check(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
check()
q()
require(devtools); require(roxygen2)
document(); build(); install()
check()
document(); build(); check()
?expand.grid
document(); build(); check(); install()
q()
require(devtools); require(roxygen2)
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
q()
require(devtools); require(roxygen2)
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
document(); build(); install()
q()
require(devtools); require(roxygen2)
document(); build(); install()
document(); build()
q()
require(devtools); require(roxygen2)
document(); build(); install()
q()
require(devtools); require(roxygen2)
q()
document(); build(); install()
q()
require(devtools); require(roxygen2)
document()
build()
check()
document()
build()
check()
document()
build()
check()
install()
?install_github
?remotes::install_github
document()
build()
check()
q()
ls()
head(erkkiwide)
erkki <- expand.grid(date=seq(from=1400, to=1600, by=10))
erkki
?sample
source("data-raw/prepare_mock_datasets.R")
df
frequentize(df)
install()
require(devtools); require(roxygen2)
document()
build()
install()
frequentize(df)
prepare_data(frequentize(df))
prepare_data(frequentize(df), format="long")
fit.cre.nls(frequentize(df), format="long", model="logistic")
fit.cre.nls(frequentize(df), format="long", model="bias")
fit.cre.nls(frequentize(df), format="long", model="VRE")
reshape(frequentize(df), idvar="date", timevar="context", direction = "wide")
head(frequentize(df))
erkko <- frequentize(df)
erkko
head(erkko)
reshape(frequentize(df)[, c("date", "context", "frequency")], idvar="date", timevar="context", direction = "wide")
source("data-raw/prepare_mock_datasets.R")
ls()
fit.cre.nls(read.csv("inst/extdata/mockdata_long.csv", format="long", model="bias")
)
fit.cre.nls(read.csv("inst/extdata/mockdata_long.csv"), format="long", model="bias")
fit.cre.nls(read.csv("inst/extdata/mockdata_wide.csv"), format="long", model="bias")
fit.cre.nls(read.csv("inst/extdata/mockdata_wide.csv"), format="wide", model="bias")
fit.cre.nls(read.csv("inst/extdata/mockdata_responses.csv"), format="long", model="bias")
fit.cre.nls(frequentize(read.csv("inst/extdata/mockdata_responses.csv")), format="long", model="bias")
fit.cre.nls(frequentize(read.csv("inst/extdata/mockdata_responses.csv")), format="long", model="bias")$parameters
fit.cre.nls(read.csv("inst/extdata/mockdata_long.csv"), format="long", model="bias")$parameters
document()
build()
check()
document()
build()
check()
install()
ls()
rm(df)
ls()
rm(erkki)
rm(erkkiwide)
rm(erkko)
rm(frequentize)
rm(wide_df)
ls()
require(cre)
citation("cre")
example_fit <- fit.cre.nls(read.csv("inst/extdata/mockdata_long.csv"), format="long", model="bias")$parameters
example_fit
example_fit <- fit.cre.nls(read.csv("inst/extdata/mockdata_long.csv"), format="long", model="bias")
example_fit
example_fit <- fit.cre.nls(read.csv("inst/extdata/mockdata_long.csv"), format="long", model="bias", budget=10)
example_fit
example_fit <- fit.cre.nls(read.csv("inst/extdata/mockdata_long.csv"), format="long", model="bias", budget=100)
example_fit
names(example_fit)
example_fit <- fit.cre.nls(read.csv("inst/extdata/mockdata_long.csv"), format="long", model="logistic", budget=100)
names(example_fit)
example_fit <- fit.cre.nls(read.csv("inst/extdata/mockdata_long.csv"), format="long", model="VRE", budget=100)
names(example_fit)
document()
build()
check()
install()
example_fit <- fit.cre.nls(read.csv("inst/extdata/mockdata_long.csv"), format="long", model="VRE", budget=100)
example_fit
21*3
source("data-raw/prepare_mock_datasets.R")
example_fit <- fit.cre.nls(read.csv("inst/extdata/mockdata_long.csv"), format="long", model="VRE", budget=100)
example_fit
names(example_fit)
document()
build()
check()
install()
example_fit <- fit.cre.nls(read.csv("inst/extdata/mockdata_long.csv"), format="long", model="VRE", budget=100)
example_fit
example_fit <- fit.cre.nls(read.csv("inst/extdata/mockdata_long.csv"), format="long", model="logistic", budget=100)
example_fit
example_fit <- fit.cre.nls(read.csv("inst/extdata/mockdata_long.csv"), format="long", model="bias", budget=100)
example_fit
example_fit <- fit.cre.nls(read.csv("inst/extdata/mockdata_long.csv"), format="long", model="logistic", budget=100)
example_fit
example_fit <- fit.cre.nls(read.csv("inst/extdata/mockdata_long.csv"), format="long", model="VRE", budget=100)
example_fit
document()
build()
check()
install()
q()
require(devtools); require(roxygen2)
document()
build()
check()
install()
q()
